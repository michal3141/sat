#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass beamer
\begin_preamble
\usetheme{Warsaw}
% or ...

\setbeamercovered{transparent}
% or whatever (possibly just delete it)
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman times
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 2
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
This file is a solution template for:
\end_layout

\begin_layout Itemize
Talk at a conference/colloquium.
 
\end_layout

\begin_layout Itemize
Talk length is about 20min.
 
\end_layout

\begin_layout Itemize
Style is ornate.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Copyright 2004 by Till Tantau <tantau@users.sourceforge.net>.
 
\end_layout

\begin_layout Plain Layout
In principle, this file can be redistributed and/or modified under the terms
 of the GNU Public License, version 2.
 However, this file is supposed to be a template to be modified for your
 own needs.
 For this reason, if you use this file as a template and not specifically
 distribute it as part of a another package/program, the author grants the
 extra permission to freely copy and modify this file as you see fit and
 even to delete this copyright notice.
 
\end_layout

\end_inset


\end_layout

\begin_layout Title
Modeling selected computational problems as SAT-CNF and analyzing (some)
 structural properties of obtained formulas
\begin_inset Argument
status open

\begin_layout Plain Layout
SAT
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
optional, use only with long paper titles
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Author
Michał Mrowczyk
\end_layout

\begin_layout Institute
\begin_inset Flex InstituteMark
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

Department of Computer Science
\begin_inset Newline newline
\end_inset

AGH Kraków
\end_layout

\begin_layout Date
Pracownia Problemowa, 2015
\begin_inset Note Note
status collapsed

\begin_layout Itemize
Either use conference name or its abbreviation.
 
\end_layout

\begin_layout Itemize
Not really informative to the audience, more for people (including yourself)
 who are reading the slides online
\end_layout

\end_inset


\begin_inset Argument
status collapsed

\begin_layout Plain Layout
CFP 2003
\begin_inset Note Note
status open

\begin_layout Plain Layout
optional, should be abbreviation of conference name
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
If you have a file called "institution-logo-filename.xxx", where xxx is a
 graphic format that can be processed by latex or pdflatex, resp., then you
 can add a logo by uncommenting the following:
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
pgfdeclareimage[height=1cm]{institution-logo}{images/agh}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
logo{
\backslash
pgfuseimage{institution-logo}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The following causes the table of contents to be shown at the beginning
 of every subsection.
 Delete this, if you do not want it.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
AtBeginSubsection[]{
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  
\backslash
frame<beamer>{ 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    
\backslash
frametitle{Outline}   
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    
\backslash
tableofcontents[currentsection,currentsubsection] 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
If you wish to uncover everything in a step-wise fashion, uncomment the
 following command:
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
beamerdefaultoverlayspecification{<+->}
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Outline
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Structuring a talk is a difficult task and the following structure may not
 be suitable.
 Here are some rules that apply for this solution: 
\end_layout

\begin_layout Itemize
Exactly two or three sections (other than the summary).
 
\end_layout

\begin_layout Itemize
At *most* three subsections per section.
 
\end_layout

\begin_layout Itemize
Talk about 30s to 2min per frame.
 So there should be between about 15 and 30 frames, all told.
\end_layout

\begin_layout Itemize
A conference audience is likely to know very little of what you are going
 to talk about.
 So *simplify*! 
\end_layout

\begin_layout Itemize
In a 20min talk, getting the main ideas across is hard enough.
 Leave out details, even if it means being less precise than you think necessary.
 
\end_layout

\begin_layout Itemize
If you omit details that are vital to the proof/implementation, just say
 so once.
 Everybody will be happy with that.
 
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction And Motivation
\end_layout

\begin_layout BeginFrame
SAT Decision Problem
\end_layout

\begin_layout FrameSubtitle
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
A title should summarize the slide in an understandable fashion for anyone
 how does not follow everything on the slide itself.
 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Given a boolean formula 
\begin_inset Formula $F$
\end_inset

 decide (answer yes/no) whether there exists a satisfying assignment of
 true/false to variables (so that the formula evaluates to true).
\end_layout

\begin_layout Itemize
\begin_inset Formula $x_{1}\wedge(\overline{x_{1}}\vee x_{2})$
\end_inset


\end_layout

\begin_layout Itemize
Setting 
\begin_inset Formula $x_{1}=1$
\end_inset

 and 
\begin_inset Formula $x_{2}=1$
\end_inset

 makes the formula above to evalutate to 
\begin_inset Formula $1$
\end_inset

(true), so we call it satisfiable (SAT)
\end_layout

\begin_layout Itemize
What about this one: 
\begin_inset Formula $(\overline{x_{1}}\vee\overline{x_{2}})\wedge(\overline{x_{1}}\vee x_{2})\wedge(x_{1}\vee\overline{x_{2}})\wedge(x_{1}\vee x_{2})$
\end_inset

 ?
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
It turns out that this one always evaluates to 
\begin_inset Formula $0$
\end_inset

 (false), so we call it unsatisfiable (UNSAT) 
\end_layout

\begin_layout BeginFrame
Why is it an important problem to study ? 
\end_layout

\begin_layout Itemize
Cook-Levin theorem: SAT is NP-complete
\end_layout

\begin_layout Itemize
All problems in NP can be encoded into SAT and solved using available SAT
 solvers
\end_layout

\begin_layout Itemize
Currently used SAT solvers can handle thousands and in some cases even millions
 of variables and constraints ! Solvers compete in annual competitions:
 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.satcompetition.org/
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
SAT Solvers
\end_layout

\begin_layout Itemize
Cryptominisat: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/msoos/cryptominisat
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
PicoSAT: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://fmv.jku.at/picosat/
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Lingeling
\end_layout

\begin_layout Itemize
Glucose
\end_layout

\begin_layout Itemize
...
\end_layout

\begin_layout BeginFrame
Some Applications
\end_layout

\begin_layout Itemize
Planning
\end_layout

\begin_layout Itemize
Scheduling
\end_layout

\begin_layout Itemize
Bioinformatics e.g.
 protein folding
\end_layout

\begin_layout Itemize
Hardware and software verification
\end_layout

\begin_layout Itemize
FPGA routing
\end_layout

\begin_layout Itemize
...
\end_layout

\begin_layout Itemize
Integer factorization - efficient polynomial time algorithm for SAT would
 even allow us to break RSA (However, it is highly unlikely that such algorithm
 exist...)
\end_layout

\begin_layout Section
My Work
\end_layout

\begin_layout BeginFrame
Plans
\end_layout

\begin_layout Enumerate
Generate various SAT instances by reduction from different problems (e.g.
 integer factorization)
\end_layout

\begin_layout Enumerate
Reduce some voting/election related problem (probably determining OWA-winner)
 to SAT
\end_layout

\begin_layout Enumerate
Try to understand the structure of SAT instances and their hardness for
 available solvers / heuristics 
\end_layout

\begin_layout BeginFrame
Work in progress - factorization
\end_layout

\begin_layout Enumerate
Problem of integer factorization using SAT:
\end_layout

\begin_deeper
\begin_layout Enumerate
Input: integer 
\begin_inset Formula $n$
\end_inset


\end_layout

\begin_layout Enumerate
Output: boolean formula 
\begin_inset Formula $F$
\end_inset

 for which the satisfying assigment is encoding factors (Formula 
\begin_inset Formula $F$
\end_inset

 is UNSAT iff 
\begin_inset Formula $n$
\end_inset

 is prime) 
\end_layout

\end_deeper
\begin_layout Enumerate
SAT instance (in DIMACS format) corresponding to the problem of factoring
 for number 
\begin_inset Formula $42$
\end_inset

: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/michal3141/sat/blob/master/data/42.dimacs
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Factorization formulas - basic properties
\end_layout

\begin_layout Standard
1.
 Given two distinct 
\begin_inset Formula $n$
\end_inset

-bit integers, and boolean formulas generated for these integers, following
 holds true:
\end_layout

\begin_layout Itemize
Formulas have the same number of variables
\end_layout

\begin_layout Itemize
Formulas have the same number of clauses
\end_layout

\begin_layout Itemize
Formulas have the same number of literals
\end_layout

\begin_layout Itemize
Formulas have the same total number of negated and non-negated variables
\end_layout

\begin_layout Standard
2.
 From elementary number theory we know there is at least one prime number
 among n-bit integers (immediate consequence of Bertrand postulate 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

) 
\end_layout

\begin_layout Standard
3.
 It seems that when replacing ORs with XORs in formulas we are getting UNSAT
 instances (verified to few 1000's)
\end_layout

\begin_layout BeginFrame
Number of variable collisions (7-bit)
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/collisions_7bits.png
	scale 50

\end_inset


\end_layout

\begin_layout BeginFrame
Number of variable collisions (11-bit)
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/collisions_11bits.png
	scale 30

\end_inset


\end_layout

\begin_layout BeginFrame
CP Modeling
\end_layout

\begin_layout Itemize
Modeling using various constraints and then translating models into SAT
 instances
\end_layout

\begin_layout Itemize
My approach to modeling: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/michal3141/sat
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Types of constraints I am currently using
\end_layout

\begin_deeper
\begin_layout Itemize
inequalities, equalities
\end_layout

\begin_layout Itemize
arithmetic operations (addition, multiplication, shift operations) - required
 for factorization
\end_layout

\end_deeper
\begin_layout Itemize
(Much) More advanced modelling software/platforms:
\end_layout

\begin_deeper
\begin_layout Itemize
MiniZinc: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.minizinc.org/
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Numberjack: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://numberjack.ucc.ie/
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Section*
Summary
\end_layout

\begin_layout BeginFrame
Summary
\end_layout

\begin_layout Itemize

\color none
Currently implementing rudimentary CP modeling library so as to generate
 various types of SAT instances and ultimately understand hardness/structure
 of instances better
\end_layout

\begin_layout Itemize
TODO: Reducing OWA problem to SAT
\end_layout

\begin_layout Itemize

\color none
TODO: Evaluation of some algorithms (including classification heuristics)
 on generated SAT instances
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Section*
\start_of_appendix
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
All of the following is optional and typically not needed.
\end_layout

\end_inset

Appendix
\end_layout

\begin_layout Subsection*
For Further Reading
\end_layout

\begin_layout BeginFrame
\begin_inset ERT
status open

\begin_layout Plain Layout

[allowframebreaks]
\end_layout

\end_inset

For Further Reading
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
beamertemplatebookbibitems
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
Start with overview books.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Handbook of Satisfiability, Biere, A., Heule, M., Van Maaren, H., Walsh, T,
 February 2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"

\end_inset

https://www3.nd.edu/~dgalvin1/pdf/bertrand.pdf
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-2"

\end_inset

 http://www.mimuw.edu.pl/~mati/fsat-20040420.pdf
\end_layout

\begin_layout EndFrame

\end_layout

\end_body
\end_document
